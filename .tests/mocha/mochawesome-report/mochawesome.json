{
  "stats": {
    "suites": 44,
    "tests": 90,
    "passes": 7,
    "pending": 0,
    "failures": 83,
    "start": "2022-09-27T20:22:29.018Z",
    "end": "2022-09-27T20:40:39.988Z",
    "duration": 1090970,
    "testsRegistered": 90,
    "passPercent": 7.777777777777778,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6272273f-1786-48ee-8da2-5cab3de712c2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d0b000ba-8901-4191-a119-7d774cc4553f",
          "title": "Keys",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "68c09858-e300-4328-9567-f1922788595a",
              "title": "Account Creation, Sign and Broadcast for User1",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Account Creation, Sign and Broadcast for User1\"",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 \"before each\" hook in \"Account Creation, Sign and Broadcast for User1\"",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "1f75f3f6-c51f-4f6d-b5c4-f6892f424b85",
                  "parentUUID": "68c09858-e300-4328-9567-f1922788595a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: 0ced02d64a36559d0264a7b303eb43e8",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 it should create an account for: 0ced02d64a36559d0264a7b303eb43e8",
                  "timedOut": false,
                  "duration": 363,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name1\n            }\n            let err, res = await chai.request(server)\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names1.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "e0cf55f0-436c-48fd-bfb1-6847c984ec65",
                  "parentUUID": "68c09858-e300-4328-9567-f1922788595a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "0ced02d64a36559d0264a7b303eb43e8 should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 0ced02d64a36559d0264a7b303eb43e8 should be able to signTx ",
                  "timedOut": false,
                  "duration": 368,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names1.value = res.body.result.tx.signatures[0].pub_key.value\n            names1.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "caf6ac70-51ce-45cf-99ec-1fc062e45ada",
                  "parentUUID": "68c09858-e300-4328-9567-f1922788595a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "0ced02d64a36559d0264a7b303eb43e8 should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 0ced02d64a36559d0264a7b303eb43e8 should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 322,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names1.typekey,\n                                \"value\": names1.value\n                            },\n                            \"signature\": names1.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')",
                  "err": {},
                  "uuid": "07cc17eb-e7d4-47b4-b822-d05d1c5ed9fe",
                  "parentUUID": "68c09858-e300-4328-9567-f1922788595a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0cf55f0-436c-48fd-bfb1-6847c984ec65",
                "caf6ac70-51ce-45cf-99ec-1fc062e45ada",
                "07cc17eb-e7d4-47b4-b822-d05d1c5ed9fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1053,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a21a6c44-2745-4641-87d3-00d61f64480a",
              "title": "Account Creation, Sign and Broadcast for User2",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Account Creation, Sign and Broadcast for User2\"",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 \"before each\" hook in \"Account Creation, Sign and Broadcast for User2\"",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "6aeb27b9-dec4-4474-83bb-6d3f917aea6c",
                  "parentUUID": "a21a6c44-2745-4641-87d3-00d61f64480a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: cd09c86e9da6ea254c83952b0717987d",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 it should create an account for: cd09c86e9da6ea254c83952b0717987d",
                  "timedOut": false,
                  "duration": 332,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name2\n            }\n            let err, res = await chai.request('http://localhost:1317')\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names2.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "eae67f49-609b-4335-bfad-f197891041bd",
                  "parentUUID": "a21a6c44-2745-4641-87d3-00d61f64480a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cd09c86e9da6ea254c83952b0717987d should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 cd09c86e9da6ea254c83952b0717987d should be able to signTx ",
                  "timedOut": false,
                  "duration": 321,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names2.value = res.body.result.tx.signatures[0].pub_key.value\n            names2.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "fe0b947e-bde4-477f-aab9-c3a1abadb0a4",
                  "parentUUID": "a21a6c44-2745-4641-87d3-00d61f64480a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cd09c86e9da6ea254c83952b0717987d should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 cd09c86e9da6ea254c83952b0717987d should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names2.typekey,\n                                \"value\": names2.value\n                            },\n                            \"signature\": names2.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')",
                  "err": {},
                  "uuid": "b5d8fe5f-fec7-44b2-a0d2-d558b201aadf",
                  "parentUUID": "a21a6c44-2745-4641-87d3-00d61f64480a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eae67f49-609b-4335-bfad-f197891041bd",
                "fe0b947e-bde4-477f-aab9-c3a1abadb0a4",
                "b5d8fe5f-fec7-44b2-a0d2-d558b201aadf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 972,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "907fd073-50b1-46da-8284-608e596e6ddf",
          "title": "Identity",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30c13dca-e506-4dd1-a53c-1c0ac2cf430e",
              "title": "Nub Tx",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Nub Tx\"",
                  "fullTitle": "Identity Nub Tx \"before each\" hook in \"Nub Tx\"",
                  "timedOut": false,
                  "duration": 5002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(6000)\nsetTimeout(function () {\n    done()\n}, 5000)",
                  "err": {},
                  "uuid": "974bf05d-c491-4c10-8faf-f862d4f0a36f",
                  "parentUUID": "30c13dca-e506-4dd1-a53c-1c0ac2cf430e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "nubTx: ",
                  "fullTitle": "Identity Nub Tx nubTx: ",
                  "timedOut": false,
                  "duration": 337,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.nubType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"nubID\": config.nubID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.nubPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "e160582e-9418-4002-afa8-1471187c2da9",
                  "parentUUID": "30c13dca-e506-4dd1-a53c-1c0ac2cf430e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e160582e-9418-4002-afa8-1471187c2da9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "df0c2d07-8e26-44ba-8058-b094807aa877",
              "title": "Issue identity 1",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Issue identity 1\"",
                  "fullTitle": "Identity Issue identity 1 \"before each\" hook in \"Issue identity 1\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "a1826329-2053-4170-8ce4-18794f30e97a",
                  "parentUUID": "df0c2d07-8e26-44ba-8058-b094807aa877",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define identity: ",
                  "fullTitle": "Identity Issue identity 1 Define identity: ",
                  "timedOut": true,
                  "duration": 10006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits1:S|num1\",\n                    \"immutableTraits\": \"immutableTraits1:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "a07c07bd-80dd-4068-a8f5-3f0cdc110d84",
                  "parentUUID": "df0c2d07-8e26-44ba-8058-b094807aa877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue identity: ",
                  "fullTitle": "Identity Issue identity 1 Issue identity: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.issueIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits1:S|num1\",\n                    \"immutableProperties\": \"immutableTraits1:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "ebaf9a16-8758-4be9-b5d1-65a13eec87d9",
                  "parentUUID": "df0c2d07-8e26-44ba-8058-b094807aa877",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a07c07bd-80dd-4068-a8f5-3f0cdc110d84",
                "ebaf9a16-8758-4be9-b5d1-65a13eec87d9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20008,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4371d2bf-5cb4-4a09-b71c-02241466c9cf",
              "title": "Provision key",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Provision key\"",
                  "fullTitle": "Identity Provision key \"before each\" hook in \"Provision key\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "8fe1d9f8-19aa-47dd-94ec-32556311cbbb",
                  "parentUUID": "4371d2bf-5cb4-4a09-b71c-02241466c9cf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision key Provision Key: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "6b6089b8-5777-4e0c-8945-33bcb0a6a2ce",
                  "parentUUID": "4371d2bf-5cb4-4a09-b71c-02241466c9cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6b6089b8-5777-4e0c-8945-33bcb0a6a2ce"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9f7fc561-8d8f-4d0b-8e0f-d6b02cb416c7",
              "title": "Unprovision key",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Unprovision key\"",
                  "fullTitle": "Identity Unprovision key \"before each\" hook in \"Unprovision key\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "7c6db160-09fc-4f76-8cb9-f38e45659fdf",
                  "parentUUID": "9f7fc561-8d8f-4d0b-8e0f-d6b02cb416c7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unprovision key: ",
                  "fullTitle": "Identity Unprovision key Unprovision key: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.unprovisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unprovisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "9f7ab0f7-d0ea-43db-a781-0b41716c16ae",
                  "parentUUID": "9f7fc561-8d8f-4d0b-8e0f-d6b02cb416c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9f7ab0f7-d0ea-43db-a781-0b41716c16ae"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "75df9067-07b7-495f-a1db-317460b54ab5",
              "title": "Provision an unprovision Key",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Provision an unprovision Key\"",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook in \"Provision an unprovision Key\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d1b557c1-4711-4c9a-86fc-1f130a47552e",
                  "parentUUID": "75df9067-07b7-495f-a1db-317460b54ab5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('DeletionNotAllowed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "2c5adfde-806c-4667-8f38-ed059a0340be",
                  "parentUUID": "75df9067-07b7-495f-a1db-317460b54ab5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2c5adfde-806c-4667-8f38-ed059a0340be"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1c929d73-77d9-4fd1-b547-63c67ad9f551",
              "title": "Issue identity 2",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Issue identity 2\"",
                  "fullTitle": "Identity Issue identity 2 \"before each\" hook in \"Issue identity 2\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "62eb0ae4-95c6-4eb5-b5f8-2ac0057a9951",
                  "parentUUID": "1c929d73-77d9-4fd1-b547-63c67ad9f551",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define identity: ",
                  "fullTitle": "Identity Issue identity 2 Define identity: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits2:S|num1\",\n                    \"immutableTraits\": \"immutableTraits2:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "733e5b06-4033-4c20-94bc-d2bdf1fb044c",
                  "parentUUID": "1c929d73-77d9-4fd1-b547-63c67ad9f551",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue identity 2: ",
                  "fullTitle": "Identity Issue identity 2 Issue identity 2: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.issueIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits2:S|num1\",\n                    \"immutableProperties\": \"immutableTraits2:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "18680642-cf0b-4274-956d-0ffb5294e054",
                  "parentUUID": "1c929d73-77d9-4fd1-b547-63c67ad9f551",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "733e5b06-4033-4c20-94bc-d2bdf1fb044c",
                "18680642-cf0b-4274-956d-0ffb5294e054"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20005,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "33641d0d-e476-46c9-986d-96f12cfd33c3",
              "title": "Issue identity 3",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Issue identity 3\"",
                  "fullTitle": "Identity Issue identity 3 \"before each\" hook in \"Issue identity 3\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c578630e-c9b2-475e-a2ae-1490a503a0aa",
                  "parentUUID": "33641d0d-e476-46c9-986d-96f12cfd33c3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define identity: ",
                  "fullTitle": "Identity Issue identity 3 Define identity: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits3:S|num1\",\n                    \"immutableTraits\": \"immutableTraits3:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "f1799c84-1faa-4f26-b47a-0d0824c31704",
                  "parentUUID": "33641d0d-e476-46c9-986d-96f12cfd33c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue identity 3: ",
                  "fullTitle": "Identity Issue identity 3 Issue identity 3: ",
                  "timedOut": true,
                  "duration": 10004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits3\")\n            let obj = {\n                \"type\": config.issueIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits3:S|num1\",\n                    \"immutableProperties\": \"immutableTraits3:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "c1bce623-ffcb-4d68-9d7b-57a156ffa9d8",
                  "parentUUID": "33641d0d-e476-46c9-986d-96f12cfd33c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f1799c84-1faa-4f26-b47a-0d0824c31704",
                "c1bce623-ffcb-4d68-9d7b-57a156ffa9d8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20006,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "02096277-920b-408f-b086-d9d32d6ecc2a",
          "title": "Assets",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7da92cf8-8c13-4f08-b8e0-41812b4c4de0",
              "title": "Mint Asset",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset\"",
                  "fullTitle": "Assets Mint Asset \"before each\" hook in \"Mint Asset\"",
                  "timedOut": false,
                  "duration": 4000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0e4bde53-e103-499a-b1c9-62794f846d20",
                  "parentUUID": "7da92cf8-8c13-4f08-b8e0-41812b4c4de0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSET2:S|\",\n                    \"mutableMetaTraits\": \"ASSET3:S|\",\n                    \"immutableMetaTraits\": \"ASSET4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "0640ebe8-e37e-43bc-928d-caec536e71ef",
                  "parentUUID": "7da92cf8-8c13-4f08-b8e0-41812b4c4de0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": true,
                  "duration": 10005,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num2\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "ae20c00d-a43d-4a62-a9c8-8bf5705d9bfd",
                  "parentUUID": "7da92cf8-8c13-4f08-b8e0-41812b4c4de0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0640ebe8-e37e-43bc-928d-caec536e71ef",
                "ae20c00d-a43d-4a62-a9c8-8bf5705d9bfd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20008,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "51d50446-85df-4a93-8005-8a3754df013d",
              "title": "Mutate Asset",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mutate Asset\"",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook in \"Mutate Asset\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "91318ce4-e942-4754-bd2c-ce62271b4250",
                  "parentUUID": "51d50446-85df-4a93-8005-8a3754df013d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET1:S|\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "8014bf28-4ad1-4de7-9a78-8c49ec2d6962",
                  "parentUUID": "51d50446-85df-4a93-8005-8a3754df013d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8014bf28-4ad1-4de7-9a78-8c49ec2d6962"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "cd0c913b-f3b0-483b-93bc-4ea385f1841c",
              "title": "Mint Asset with meta properties",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset with meta properties\"",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook in \"Mint Asset with meta properties\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "25d00918-2226-4b98-a6c5-b8b548023085",
                  "parentUUID": "cd0c913b-f3b0-483b-93bc-4ea385f1841c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "ada86efc-29b2-4e73-9f07-f1947eab0015",
                  "parentUUID": "cd0c913b-f3b0-483b-93bc-4ea385f1841c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ada86efc-29b2-4e73-9f07-f1947eab0015"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5122d068-8de2-4542-b0f5-6b276846899e",
              "title": "Mutate asset non meta properties to meta properties",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mutate asset non meta properties to meta properties\"",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties \"before each\" hook in \"Mutate asset non meta properties to meta properties\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "9215b271-417a-4864-b812-3d5affccd7ce",
                  "parentUUID": "5122d068-8de2-4542-b0f5-6b276846899e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Define Asset: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS2:S|\",\n                    \"mutableMetaTraits\": \"ASSETS3:S|\",\n                    \"immutableMetaTraits\": \"ASSETS4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "601bbac2-8441-454d-a56d-b37346e1df14",
                  "parentUUID": "5122d068-8de2-4542-b0f5-6b276846899e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "c0866de6-6530-4078-96e8-c0e65d511f37",
                  "parentUUID": "5122d068-8de2-4542-b0f5-6b276846899e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 324,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj);\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/assets.js:279:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "1e51d425-0d9e-43a7-8203-97318c771a3c",
                  "parentUUID": "5122d068-8de2-4542-b0f5-6b276846899e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSETS1:S|\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "25f1a054-c58e-4a1e-bf10-9d88b17e4fc4",
                  "parentUUID": "5122d068-8de2-4542-b0f5-6b276846899e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "601bbac2-8441-454d-a56d-b37346e1df14",
                "c0866de6-6530-4078-96e8-c0e65d511f37",
                "1e51d425-0d9e-43a7-8203-97318c771a3c",
                "25f1a054-c58e-4a1e-bf10-9d88b17e4fc4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30331,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "99d486b5-338e-4746-b0bf-b3ac24a593f4",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset with 22 properties\"",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook in \"Mint Asset with 22 properties\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f9a7c715-3084-4bd2-b33e-ae005133066a",
                  "parentUUID": "99d486b5-338e-4746-b0bf-b3ac24a593f4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|2\",\n                    \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "59616e67-5ba7-42ce-b857-e9cf02bd5628",
                  "parentUUID": "99d486b5-338e-4746-b0bf-b3ac24a593f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "e5e25d6c-24d2-4ca4-803d-fb5ac8c3ceb7",
                  "parentUUID": "99d486b5-338e-4746-b0bf-b3ac24a593f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "59616e67-5ba7-42ce-b857-e9cf02bd5628",
                "e5e25d6c-24d2-4ca4-803d-fb5ac8c3ceb7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0a632fc9-c9e7-4ee0-973e-557364aaac91",
              "title": "Add asset properties on mutation",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Add asset properties on mutation\"",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook in \"Add asset properties on mutation\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b0c79128-0145-4678-a3b2-9df326a563d6",
                  "parentUUID": "0a632fc9-c9e7-4ee0-973e-557364aaac91",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n                    \"immutableTraits\": \"ASSET_A6:S|\",\n                    \"mutableMetaTraits\": \"ASSET_A7:S|\",\n                    \"immutableMetaTraits\": \"ASSET_A8:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "3826c768-0e12-4893-afff-b8195c6f7db3",
                  "parentUUID": "0a632fc9-c9e7-4ee0-973e-557364aaac91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n                    \"immutableProperties\": \"ASSET_A6:S|B\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n                    \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "61b15634-b497-41a5-9ed7-19b1fb914e0c",
                  "parentUUID": "0a632fc9-c9e7-4ee0-973e-557364aaac91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET_A5:S|AA\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|CC\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "fe477075-e2d9-4728-8477-c0633f6c0c93",
                  "parentUUID": "0a632fc9-c9e7-4ee0-973e-557364aaac91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3826c768-0e12-4893-afff-b8195c6f7db3",
                "61b15634-b497-41a5-9ed7-19b1fb914e0c",
                "fe477075-e2d9-4728-8477-c0633f6c0c93"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30006,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "93b9f028-1fdf-46cf-9bf7-e795325606ad",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset with more than 22 properties\"",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook in \"Mint Asset with more than 22 properties\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "6aa88ab1-33e9-4676-b011-a64e178bab3b",
                  "parentUUID": "93b9f028-1fdf-46cf-9bf7-e795325606ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('InvalidRequest')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "fe23d5b7-3da1-425e-b66e-405748ca4fb8",
                  "parentUUID": "93b9f028-1fdf-46cf-9bf7-e795325606ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fe23d5b7-3da1-425e-b66e-405748ca4fb8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset with burn greater than forseeable block height\"",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook in \"Mint Asset with burn greater than forseeable block height\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "db07e53d-3ad5-4852-acba-ddded35c4781",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"AssetB:S|\",\n                    \"mutableMetaTraits\": \"AssetC:S|num3\",\n                    \"immutableMetaTraits\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "5896fb53-39d9-48dd-8a87-20bc484b3dba",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n                    \"immutableProperties\": \"AssetB:S|num2\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\",\n                    \"immutableMetaProperties\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "f7e552cf-9933-45d9-97d9-3a942470da59",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 321,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100000000\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/assets.js:634:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "f2d681e6-514c-4b3b-aa40-257e144d9ac7",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "2996b552-626d-4474-8e86-9b3ec1c5fcc2",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 312,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/assets.js:685:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "599489ab-fa09-4a51-91d3-c75c062be039",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "0def20a8-48c8-473e-b9d1-072f3506d63f",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "8d2c05e4-818e-47f9-bea2-1f592c9a36e7",
                  "parentUUID": "507a0796-7842-4b2c-a5ee-fb2010b58dd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5896fb53-39d9-48dd-8a87-20bc484b3dba",
                "f7e552cf-9933-45d9-97d9-3a942470da59",
                "f2d681e6-514c-4b3b-aa40-257e144d9ac7",
                "2996b552-626d-4474-8e86-9b3ec1c5fcc2",
                "599489ab-fa09-4a51-91d3-c75c062be039",
                "0def20a8-48c8-473e-b9d1-072f3506d63f",
                "8d2c05e4-818e-47f9-bea2-1f592c9a36e7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 50642,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8468ef39-048c-465f-bf0c-cca54c64f25c",
              "title": "Send splits of an asset and then mutate ",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Send splits of an asset and then mutate \"",
                  "fullTitle": "Assets Send splits of an asset and then mutate  \"before each\" hook in \"Send splits of an asset and then mutate \"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d35d4082-ab57-4386-b91f-7421f872a688",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Define Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"One:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Two:S|\",\n                    \"mutableMetaTraits\": \"Three:S|\",\n                    \"immutableMetaTraits\": \"Four:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "10386f13-03c9-45d5-a982-17e22059a0df",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Mint Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Two:S|Two\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                    \"immutableMetaProperties\": \"Four:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "e2f98164-1cb0-467f-b766-163b01c6a5c1",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send asset: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Send asset: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\": \"0.000000000000000001\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "c8dfdedb-4b23-428a-845e-d517daaa2cfa",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate asset: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Mutate asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "574fe091-947a-4c69-9a34-b931056ddfb2",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make toID as maintainer: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Make toID as maintainer: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.deputizeType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID1,\n                    \"classificationID\": clsID,\n                    \"fromID\": identityID,\n                    \"maintainedTraits\": \"One:S|One,Three:S|Three,burn:H|1\",\n                    \"addMaintainer\": true,\n                    \"removeMaintainer\": true,\n                    \"mutateMaintainer\": true\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.deputizePath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "fd1bc074-aabf-48c0-bbdc-7b36fd799595",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate asset: ",
                  "fullTitle": "Assets Send splits of an asset and then mutate  Mutate asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "6cf08419-79a9-4e45-ab75-aaaf90e71e1e",
                  "parentUUID": "8468ef39-048c-465f-bf0c-cca54c64f25c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "10386f13-03c9-45d5-a982-17e22059a0df",
                "e2f98164-1cb0-467f-b766-163b01c6a5c1",
                "c8dfdedb-4b23-428a-845e-d517daaa2cfa",
                "574fe091-947a-4c69-9a34-b931056ddfb2",
                "fd1bc074-aabf-48c0-bbdc-7b36fd799595",
                "6cf08419-79a9-4e45-ab75-aaaf90e71e1e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f4dc52fa-2eb7-43f8-98cf-a83f7c24384e",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mint Asset with extra properties when mutable trait is not defined\"",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook in \"Mint Asset with extra properties when mutable trait is not defined\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "6d567ab9-de06-48cc-84bc-8be83b02e6fd",
                  "parentUUID": "f4dc52fa-2eb7-43f8-98cf-a83f7c24384e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n                    \"immutableTraits\": \"ASSETA2:S|G\",\n                    \"mutableMetaTraits\": \"ASSETA3:S|L\",\n                    \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "4f46f420-4ca9-4046-ae07-a2854802b92d",
                  "parentUUID": "f4dc52fa-2eb7-43f8-98cf-a83f7c24384e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETA4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA11:S|B,ASSETA111:S|C\",\n                    \"immutableProperties\": \"ASSETA2:S|G\",\n                    \"mutableMetaProperties\": \"ASSETA3:S|L\",\n                    \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('NotAuthorized')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "84e062f8-e830-41e8-9f01-28edaa4d1904",
                  "parentUUID": "f4dc52fa-2eb7-43f8-98cf-a83f7c24384e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4f46f420-4ca9-4046-ae07-a2854802b92d",
                "84e062f8-e830-41e8-9f01-28edaa4d1904"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
              "title": "Burn Asset",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Burn Asset\"",
                  "fullTitle": "Assets Burn Asset \"before each\" hook in \"Burn Asset\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d2661ae5-a764-4fe1-8f67-85399e0ca032",
                  "parentUUID": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Burn Asset Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"Five:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Six:S|\",\n                    \"mutableMetaTraits\": \"Seven:S|\",\n                    \"immutableMetaTraits\": \"Eight:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "d0cad035-af5d-4f92-9e79-4482965061d0",
                  "parentUUID": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint asset: ",
                  "fullTitle": "Assets Burn Asset Mint asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Eight\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"Five:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Six:S|Two\",\n                    \"mutableMetaProperties\": \"Seven:S|Three\",\n                    \"immutableMetaProperties\": \"Eight:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "b32f9cb5-6ddd-40b0-8467-75d7481678d1",
                  "parentUUID": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta reveal: ",
                  "fullTitle": "Assets Burn Asset Meta reveal: ",
                  "timedOut": false,
                  "duration": 314,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|1\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/assets.js:1124:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "8ad1b209-b149-4405-908d-28a239d97b4c",
                  "parentUUID": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn asset",
                  "fullTitle": "Assets Burn Asset Burn asset",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"Eight\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "3856856b-a7a4-44e3-84b7-50c677ebe72b",
                  "parentUUID": "5b469dbf-f0cf-4b32-874b-14788b0d5708",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d0cad035-af5d-4f92-9e79-4482965061d0",
                "b32f9cb5-6ddd-40b0-8467-75d7481678d1",
                "8ad1b209-b149-4405-908d-28a239d97b4c",
                "3856856b-a7a4-44e3-84b7-50c677ebe72b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30320,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ba2d0f69-777b-4d96-bec0-3d0aed815938",
          "title": "Splits",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bacee4dc-5ce2-485a-960d-4a6ad3ac69e3",
              "title": "Send split of an asset",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Send split of an asset\"",
                  "fullTitle": "Splits Send split of an asset \"before each\" hook in \"Send split of an asset\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "bba5565b-4b03-4941-8d24-2da8d942b02b",
                  "parentUUID": "bacee4dc-5ce2-485a-960d-4a6ad3ac69e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Splits Send split of an asset Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableTraits\": \"AssetBDef2:S|\",\n                    \"mutableMetaTraits\": \"AssetCDef3:S|\",\n                    \"immutableMetaTraits\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "1d5b127d-4b8c-45af-b197-d811d8788482",
                  "parentUUID": "bacee4dc-5ce2-485a-960d-4a6ad3ac69e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint asset: ",
                  "fullTitle": "Splits Send split of an asset Mint asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableProperties\": \"AssetBDef2:S|\",\n                    \"mutableMetaProperties\": \"AssetCDef3:S|\",\n                    \"immutableMetaProperties\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "35c7f6a9-bd48-4dc0-a2a5-f4148b79ee83",
                  "parentUUID": "bacee4dc-5ce2-485a-960d-4a6ad3ac69e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits Send split of an asset Send split of an asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let assetID = await assets.queryAsset(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\": config.splitVal\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "e6516290-1dbc-40f6-ad0b-f595e9757f11",
                  "parentUUID": "bacee4dc-5ce2-485a-960d-4a6ad3ac69e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1d5b127d-4b8c-45af-b197-d811d8788482",
                "35c7f6a9-bd48-4dc0-a2a5-f4148b79ee83",
                "e6516290-1dbc-40f6-ad0b-f595e9757f11"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30006,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "163f7d52-f8f3-4e24-bd97-018aba3d172f",
              "title": "Wrap a coin",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Wrap a coin\"",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook in \"Wrap a coin\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "5031461d-d49c-481b-820e-7dc6d408fc4d",
                  "parentUUID": "163f7d52-f8f3-4e24-bd97-018aba3d172f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\nlet obj = {\n    \"type\": config.wrapCoinType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"fromID\": identityID,\n        \"coins\": config.coins\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.wrapCoinPath)\n    .send(obj)\nres.should.have.status(200);\nres.body.should.be.a('object');\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "aea65a10-75b4-442f-b773-9832d279bbc6",
                  "parentUUID": "163f7d52-f8f3-4e24-bd97-018aba3d172f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aea65a10-75b4-442f-b773-9832d279bbc6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "901401c4-7ba3-48c7-b056-265c87e47df8",
              "title": "Unwrap a coin",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Unwrap a coin\"",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook in \"Unwrap a coin\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "5e08bf31-7857-46ea-8534-d3501bef2872",
                  "parentUUID": "901401c4-7ba3-48c7-b056-265c87e47df8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.unwrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"ownableID\": \"stake\",\n                    \"split\": \"100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unwrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "9e3284b3-9ff4-428f-a19b-1537bc332b6d",
                  "parentUUID": "901401c4-7ba3-48c7-b056-265c87e47df8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9e3284b3-9ff4-428f-a19b-1537bc332b6d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "3b4ffb39-ba0e-4184-a80c-c68eec7d6194",
              "title": "Send split of an coin",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Send split of an coin\"",
                  "fullTitle": "Splits Send split of an coin \"before each\" hook in \"Send split of an coin\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "5ff369a0-079e-49eb-b339-35fb7fb1ad85",
                  "parentUUID": "3b4ffb39-ba0e-4184-a80c-c68eec7d6194",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits Send split of an coin Send split of an coin: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitVal\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "68ca996c-0f8e-454e-997a-7a1ed49f750b",
                  "parentUUID": "3b4ffb39-ba0e-4184-a80c-c68eec7d6194",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "68ca996c-0f8e-454e-997a-7a1ed49f750b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "bfce2c77-ed7e-47c8-bc12-46d0c55bad69",
          "title": "Metas",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "914bb876-b1b8-4b97-913c-f82001d15de4",
              "title": "Reveal a meta",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal a meta\"",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook in \"Reveal a meta\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "8877bb4f-e9eb-4bf4-abbe-cd758d5c2847",
                  "parentUUID": "914bb876-b1b8-4b97-913c-f82001d15de4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableTraits\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaTraits\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaTraits\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "60845199-e5d8-4277-a513-4871014a26be",
                  "parentUUID": "914bb876-b1b8-4b97-913c-f82001d15de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_PD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableProperties\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaProperties\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaProperties\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "f32621a9-9846-491a-b564-86cdffb6604b",
                  "parentUUID": "914bb876-b1b8-4b97-913c-f82001d15de4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 308,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:114:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "2276fc77-d496-445e-9287-fc22f0c3a447",
                  "parentUUID": "914bb876-b1b8-4b97-913c-f82001d15de4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "60845199-e5d8-4277-a513-4871014a26be",
                "f32621a9-9846-491a-b564-86cdffb6604b",
                "2276fc77-d496-445e-9287-fc22f0c3a447"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20311,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5b8f0d36-600f-4b13-a87b-4c607683542b",
              "title": "Reveal a meta of id type",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal a meta of id type\"",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook in \"Reveal a meta of id type\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "1a225840-dbde-4a1b-9334-2baed397b33b",
                  "parentUUID": "5b8f0d36-600f-4b13-a87b-4c607683542b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 325,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n    \"type\": config.metaRevealType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"metaFact\": \"I|ID\"\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.metaRevealPath)\n    .send(obj)\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:146:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "4808d817-64f9-42c4-a64b-0fbfd082ec56",
                  "parentUUID": "5b8f0d36-600f-4b13-a87b-4c607683542b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4808d817-64f9-42c4-a64b-0fbfd082ec56"
              ],
              "pending": [],
              "skipped": [],
              "duration": 325,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c4276711-ed95-44b4-9fc1-fe9a1505e006",
              "title": "Reveal a meta of string type",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal a meta of string type\"",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook in \"Reveal a meta of string type\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b322a3fe-0e1d-47e7-897b-962a7724421e",
                  "parentUUID": "c4276711-ed95-44b4-9fc1-fe9a1505e006",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 327,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|A\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:179:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "b23003d1-8f9c-4498-a214-ccb1f75d7b93",
                  "parentUUID": "c4276711-ed95-44b4-9fc1-fe9a1505e006",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b23003d1-8f9c-4498-a214-ccb1f75d7b93"
              ],
              "pending": [],
              "skipped": [],
              "duration": 327,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "cd21f50e-e22a-47c1-963b-af0cc8ae3ec5",
              "title": "Reveal a meta of dec type",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal a meta of dec type\"",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook in \"Reveal a meta of dec type\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "a62101e4-ac4b-4994-ad72-92b1d512eb4e",
                  "parentUUID": "cd21f50e-e22a-47c1-963b-af0cc8ae3ec5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 322,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"D|0.344\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:212:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "9700e499-a19a-4245-8447-b0cfa76aa77f",
                  "parentUUID": "cd21f50e-e22a-47c1-963b-af0cc8ae3ec5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9700e499-a19a-4245-8447-b0cfa76aa77f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 322,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9117d5bb-a5fb-44cb-a5c8-ad222f9b673f",
              "title": "Reveal a meta of height type",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal a meta of height type\"",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook in \"Reveal a meta of height type\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "1fcd17ac-b9a5-4d5f-9374-335c4d970b54",
                  "parentUUID": "9117d5bb-a5fb-44cb-a5c8-ad222f9b673f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 314,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:245:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "8399ab0f-477f-46bc-bd8e-0070e7620e3e",
                  "parentUUID": "9117d5bb-a5fb-44cb-a5c8-ad222f9b673f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8399ab0f-477f-46bc-bd8e-0070e7620e3e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 314,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b916be9c-4f21-4a44-81f7-fdda451fa7b8",
              "title": "Reveal an already revealed meta",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Reveal an already revealed meta\"",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook in \"Reveal an already revealed meta\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "115d0df5-d686-4414-9bcb-c88f799f11a3",
                  "parentUUID": "b916be9c-4f21-4a44-81f7-fdda451fa7b8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 343,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('EntityAlreadyExists')",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/transactions/metas.js:278:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "695f2a4c-6733-4803-96d1-aa11585430a0",
                  "parentUUID": "b916be9c-4f21-4a44-81f7-fdda451fa7b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "695f2a4c-6733-4803-96d1-aa11585430a0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e5d7fc6b-1a88-4571-a4d5-45a3e5399476",
          "title": "Orders",
          "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
              "title": "Create an asset make order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Create an asset make order\"",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook in \"Create an asset make order\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "bcdaa850-4b8d-47c0-a89d-68c478c1af85",
                  "parentUUID": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an asset make order Define Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_P1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_P2:S|\",\n                    \"mutableMetaTraits\": \"A_P3:S|\",\n                    \"immutableMetaTraits\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "a6db00ef-b6bf-4166-bfbf-06e0be3b37ff",
                  "parentUUID": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an asset make order Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_P4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_P1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_P2:S|\",\n                    \"mutableMetaProperties\": \"A_P3:S|\",\n                    \"immutableMetaProperties\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "30a67ac3-4e2f-4a2c-b4b4-e0a7dadfb609",
                  "parentUUID": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": true,
                  "duration": 10000,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name:S|,Gifts:S|Exchange,OrderID:S|\",\n                    \"immutableTraits\": \"Which Gifts:S|,What Gifts:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "cbef0f18-f4fd-465a-b915-095e173283f3",
                  "parentUUID": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\": \"stake\",\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "03578261-9a64-48a2-8f9b-f5c4385bc252",
                  "parentUUID": "1fffafa7-99f6-4aad-b781-93a26fc9f132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a6db00ef-b6bf-4166-bfbf-06e0be3b37ff",
                "30a67ac3-4e2f-4a2c-b4b4-e0a7dadfb609",
                "cbef0f18-f4fd-465a-b915-095e173283f3",
                "03578261-9a64-48a2-8f9b-f5c4385bc252"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9badd77e-176f-4232-b55a-cece682d543c",
              "title": "Cancel an asset order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Cancel an asset order\"",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook in \"Cancel an asset order\"",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "de13abd9-a8a7-4b44-bbbf-68c75e3f08c5",
                  "parentUUID": "9badd77e-176f-4232-b55a-cece682d543c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "61ba8ed8-54ef-4487-9ee6-d4fb8a9c4ebe",
                  "parentUUID": "9badd77e-176f-4232-b55a-cece682d543c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "61ba8ed8-54ef-4487-9ee6-d4fb8a9c4ebe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "be77332d-8774-420b-9f0a-69e08b792502",
              "title": "Take an asset take order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Take an asset take order\"",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook in \"Take an asset take order\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "081cf575-b50b-412e-9dea-277c1d21256f",
                  "parentUUID": "be77332d-8774-420b-9f0a-69e08b792502",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Take an asset take order Make Order: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\": \"stake\",\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "4b0f4c91-6314-45b4-ae3e-ecbf8455befb",
                  "parentUUID": "be77332d-8774-420b-9f0a-69e08b792502",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Splits send: ",
                  "fullTitle": "Orders Take an asset take order Splits send: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitVal\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "b69b0f3e-d0e4-44f9-8707-38a2c1fe514d",
                  "parentUUID": "be77332d-8774-420b-9f0a-69e08b792502",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerOwnableSplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "663ebd1c-6293-4002-8ff5-177bd273e4b0",
                  "parentUUID": "be77332d-8774-420b-9f0a-69e08b792502",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4b0f4c91-6314-45b4-ae3e-ecbf8455befb",
                "b69b0f3e-d0e4-44f9-8707-38a2c1fe514d",
                "663ebd1c-6293-4002-8ff5-177bd273e4b0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
              "title": "Create a coin make order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Create a coin make order\"",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook in \"Create a coin make order\"",
                  "timedOut": false,
                  "duration": 4000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "31b36a16-e606-4339-849f-045397fde29b",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create a coin make order Define Asset: ",
                  "timedOut": true,
                  "duration": 10003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PP2:S|\",\n                    \"mutableMetaTraits\": \"A_PP3:S|\",\n                    \"immutableMetaTraits\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "2af2b6d0-062d-4aab-9ae6-9b04319cd7ce",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create a coin make order Mint Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PP2:S|\",\n                    \"mutableMetaProperties\": \"A_PP3:S|\",\n                    \"immutableMetaProperties\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "4fb69787-00f4-49ff-bf3a-e7f169930a59",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": true,
                  "duration": 9996,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name1:S|,Gifts1:S|Exchange,OrderID1:S|\",\n                    \"immutableTraits\": \"Which Gifts1:S|,What Gifts1:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions1:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "a0ebdf1f-caba-4a2b-b28b-ba2f1b2a63c2",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": true,
                  "duration": 9999,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"coins\": config.coins\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "9c972985-b979-4183-8bd2-41c24cd48053",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\": \"stake\",\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "8ce8374a-ab97-4932-afa5-e930ac3ca489",
                  "parentUUID": "a6a1ffc6-a324-4fa1-9cc2-b38a589829a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2af2b6d0-062d-4aab-9ae6-9b04319cd7ce",
                "4fb69787-00f4-49ff-bf3a-e7f169930a59",
                "a0ebdf1f-caba-4a2b-b28b-ba2f1b2a63c2",
                "9c972985-b979-4183-8bd2-41c24cd48053",
                "8ce8374a-ab97-4932-afa5-e930ac3ca489"
              ],
              "pending": [],
              "skipped": [],
              "duration": 50000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "aba6c746-c683-4d3f-b291-24b909eebc22",
              "title": "Cancel a coin order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Cancel a coin order\"",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook in \"Cancel a coin order\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "90f5ee94-e093-4e2a-af2e-10ee743081aa",
                  "parentUUID": "aba6c746-c683-4d3f-b291-24b909eebc22",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "cb5fe626-825d-49a0-a4f9-01fd9fc50367",
                  "parentUUID": "aba6c746-c683-4d3f-b291-24b909eebc22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "cb5fe626-825d-49a0-a4f9-01fd9fc50367"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10001,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2c438143-ae4b-4b54-a2c8-682266605663",
              "title": "Take a coin take order",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Take a coin take order\"",
                  "fullTitle": "Orders Take a coin take order \"before each\" hook in \"Take a coin take order\"",
                  "timedOut": false,
                  "duration": 4000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0d6ee3df-fc6e-41c8-8726-b754a3c58d70",
                  "parentUUID": "2c438143-ae4b-4b54-a2c8-682266605663",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Make Order: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\": \"stake\",\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "70b2bd16-ff10-4477-8eb6-7d41f8c0710a",
                  "parentUUID": "2c438143-ae4b-4b54-a2c8-682266605663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Take Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Take Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerOwnableSplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "90cbf696-12f2-4aab-91ce-98098445b815",
                  "parentUUID": "2c438143-ae4b-4b54-a2c8-682266605663",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "70b2bd16-ff10-4477-8eb6-7d41f8c0710a",
                "90cbf696-12f2-4aab-91ce-98098445b815"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
              "title": "Create an order with correct takerID",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Create an order with correct takerID\"",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook in \"Create an order with correct takerID\"",
                  "timedOut": false,
                  "duration": 4000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "91812083-6197-49bb-9933-16965059c3ff",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PPP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PPP2:S|\",\n                    \"mutableMetaTraits\": \"A_PPP3:S|\",\n                    \"immutableMetaTraits\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "a87de457-43ba-4b88-9a8e-297976a70f4e",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Mint Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PPP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PPP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PPP2:S|\",\n                    \"mutableMetaProperties\": \"A_PPP3:S|\",\n                    \"immutableMetaProperties\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "3fdcc794-5729-4e0a-9f61-33aa6ece4279",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name2:S|,Gifts2:S|Exchange,OrderID2:S|\",\n                    \"immutableTraits\": \"Which Gifts2:S|,What Gifts2:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions2:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "9d4b7a97-1d52-4a99-b37d-a38072b96315",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Name2\")\n            let assetID = await assets.queryAsset(\"A_PPP4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\": identityID1,\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name2:S|Board,Gifts2:S|Exchange,OrderID2:S|12345\",\n                    \"immutableProperties\": \"Which Gifts2:S|Christmas Gift,What Gifts2:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions2:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "c4b36883-a52c-4c2a-9dc5-0ab4e7866e4d",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with Incorrect ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with Incorrect ID: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerOwnableSplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "0b78e597-d261-45f8-b2bc-b2cf97a1e37e",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with correct ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with correct ID: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerOwnableSplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "8536ec1b-4b76-440a-ae41-44e159d5255e",
                  "parentUUID": "1c7cc7f3-9fce-4e01-833a-049814134a6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a87de457-43ba-4b88-9a8e-297976a70f4e",
                "3fdcc794-5729-4e0a-9f61-33aa6ece4279",
                "9d4b7a97-1d52-4a99-b37d-a38072b96315",
                "c4b36883-a52c-4c2a-9dc5-0ab4e7866e4d",
                "0b78e597-d261-45f8-b2bc-b2cf97a1e37e",
                "8536ec1b-4b76-440a-ae41-44e159d5255e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js",
              "file": "/tests/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Sell assets with splits, where taker gives more splits than he is supposed to\"",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook in \"Sell assets with splits, where taker gives more splits than he is supposed to\"",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "cdbb9149-4c6c-4e2a-b2f1-c0cf2c575a72",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS11:S|\",\n                    \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "8ecdc380-5e5a-4c15-951c-86df3a9c0082",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS13\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS11:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "336f7457-7db2-4ab8-9283-038bf7a68818",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name3:S|,Gifts3:S|Exchange,OrderID3:S|\",\n                    \"immutableTraits\": \"Which Gifts3:S|,What Gifts3:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions3:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "dc7e5dc9-acf6-4581-99a0-db07f8f5999b",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Make Order: ",
                  "timedOut": true,
                  "duration": 10001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name3\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\": \"stake\",\n                    \"expiresIn\": \"100000\",\n                    \"makerOwnableSplit\": \"100\",\n                    \"immutableMetaProperties\": \"Name3:S|Board,Gifts3:S|Exchange,OrderID3:S|12345\",\n                    \"immutableProperties\": \"Which Gifts3:S|Christmas Gift,What Gifts3:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions3:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "2779bf7a-b087-4c5b-8a44-bdec530af584",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Take Order: ",
                  "timedOut": true,
                  "duration": 10002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name3\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": \"200\",\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {
                    "message": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)",
                    "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/sarvagyasagar/Documents/Projects/node/.tests/mocha/tests/tests.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                    "diff": null
                  },
                  "uuid": "99d7b626-16d7-40e4-8bc5-7a8d71d1f756",
                  "parentUUID": "170e7be3-e39e-4a8e-b748-7e856dea7eea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8ecdc380-5e5a-4c15-951c-86df3a9c0082",
                "336f7457-7db2-4ab8-9283-038bf7a68818",
                "dc7e5dc9-acf6-4581-99a0-db07f8f5999b",
                "2779bf7a-b087-4c5b-8a44-bdec530af584",
                "99d7b626-16d7-40e4-8bc5-7a8d71d1f756"
              ],
              "pending": [],
              "skipped": [],
              "duration": 50008,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}